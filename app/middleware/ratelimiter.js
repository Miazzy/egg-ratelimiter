"use strict";
const Limiter = require("ratelimiter");
const ms = require("ms");
const debug = require('debug')('egg-ratelimiter');
async function thenify(fn) {
    return await new Promise((resolve, reject) => {
        function callback(err, res) {
            if (err)
                return reject(err);
            return resolve(res);
        }
        fn(callback);
    });
}
module.exports = (opts = {}) => {
    const { remaining = 'X-RateLimit-Remaining', reset = 'X-RateLimit-Reset', total = 'X-RateLimit-Limit' } = opts.headers || {};
    let actionKeys = [];
    opts.router.forEach(item => actionKeys.push(item.path));
    return async (ctx, next) => {
        // 如果没有限制配置，则直接返回
        if (actionKeys.length === 0)
            return await next();
        // 如果当前访问URL 路径不在actionKeys中 则直接返回
        if (actionKeys.indexOf(ctx.url) === -1)
            return await next();
        //通过ips获取 nginx代理层真实IP，需要配置 config.proxy = true;
        const ips = ctx.ips.length > 0 ? ctx.ips[0] !== '127.0.0.1' ? ctx.ips[0] : ctx.ips[1] : ctx.ip;
        const opt = opts.router[actionKeys.indexOf(ctx.url)]; //请求路径['/']
        const id = ips;
        if (id == null)
            return await next();
        // initialize limiter
        const limiter = new Limiter(Object.assign({}, opt, { id: `${id}:${ctx.url}`, db: opts.db || ctx.app.redis }));
        // check limit
        const limit = await thenify(limiter.get.bind(limiter));
        // check if current call is legit
        const calls = limit.remaining > 0 ? limit.remaining - 1 : 0;
        // header fields
        const headers = {
            [remaining]: calls,
            [reset]: limit.reset,
            [total]: limit.total
        };
        ctx.set(headers);
        debug('remaining %s/%s %s', calls, limit.total, id);
        if (limit.remaining)
            return await next();
        const delta = (limit.reset * 1000 - Date.now()) | 0;
        const after = (limit.reset - Date.now() / 1000) | 0;
        ctx.set('Retry-After', after);
        ctx.status = 429;
        ctx.body = opt.errorMessage || `Rate limit exceeded, retry in ${ms(delta, { long: true })}.`;
        if (opts.throw) {
            ctx.throw(ctx.status, ctx.body, {
                headers
            });
        }
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF0ZWxpbWl0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL3BsdWdpbi9lZ2ctcmF0ZWxpbWl0ZXIvYXBwL21pZGRsZXdhcmUvcmF0ZWxpbWl0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHVDQUF1QztBQUN2Qyx5QkFBMEI7QUFDMUIsTUFBTSxLQUFLLEdBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFrRW5ELEtBQUssa0JBQWtCLEVBQUU7SUFDckIsT0FBTyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQzNDLGtCQUFrQixHQUFHLEVBQUUsR0FBRztZQUN4QixJQUFJLEdBQUc7Z0JBQUUsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUIsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEIsQ0FBQztRQUNELEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNmLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQXhFRCxpQkFBUyxDQUFDLE9BQVksRUFBRSxFQUFFLEVBQUU7SUFFeEIsTUFBTSxFQUNGLFNBQVMsR0FBRyx1QkFBdUIsRUFDbkMsS0FBSyxHQUFHLG1CQUFtQixFQUMzQixLQUFLLEdBQUcsbUJBQW1CLEVBQzlCLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFFdkIsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUV4RCxPQUFPLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFpQixFQUFFO1FBRXRDLGlCQUFpQjtRQUNqQixJQUFJLFVBQVUs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